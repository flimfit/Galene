# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- refactor-flim-ui

pr:
- master

variables:
- group: passwords

jobs:
- job: Build
  timeoutInMinutes: 360

  strategy:
    matrix:

      linux:
        imageName: 'ubuntu-16.04'
        CXX: '/usr/bin/clang++'
        CC: '/usr/bin/clang'
        buildPlatform: 'linux'
        setupCommand: 'sudo apt-get install ninja-build'
        buildCommand: './build-flim-ui.sh'
        publishPath: 'Build/Release/Galene/*'

      mac:
        imageName: 'macos-10.14'
        DEVELOPER_DIR: '/Applications/Xcode_10.2.1.app'
        buildPlatform: 'osx'
        setupCommand: 'brew install ninja && npm install -g appdmg@0.5.2'
        buildCommand: './build-flim-ui.sh && ./create-dmg.sh'
        publishPath: '*.dmg'

      windows:
        imageName: 'vs2017-win2016'
        buildPlatform: 'windows'
        setupCommand: choco install cuda -y
        buildCommand: .\build-flim-ui.bat --clean --generator Ninja
        publishPath: Build\*.exe
        CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.1


  variables:
    VCPKG_ROOT: '$(Build.SourcesDirectory)/env/vcpkg'
    archiveFile: '$(Build.ArtifactStagingDirectory)/galene-$(buildPlatform).zip'

  pool:
    vmImage: $(imageName)

  steps:

  - task: InstallAppleCertificate@2
    condition: eq(variables['buildPlatform'],'osx')
    inputs:
      certSecureFile: 'sean-warren-apple-dev-cert-azure.p12'
      certPwd: '$(apple-dev-cert-password)'
      keychain: 'temp'

  - script: $(setupCommand)
    displayName: 'Setup environment'

  # Download vcpkg
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific' # Options: current, specific
      project: 'FLIMfit'
      pipeline: 'FLIMfit vcpkg'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latestFromBranch'
      allowPartiallySucceededBuilds: true
      branchName: 'refs/heads/master'
      artifactName: 'flimfit-env-$(buildPlatform)'
      downloadPath: '$(System.ArtifactsDirectory)' 

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)/**/*.zip' 
      destinationFolder: '$(Build.SourcesDirectory)/env'
      cleanDestinationFolder: false

  - script: $(buildCommand)
    displayName: 'Build Galene'

  - task: CopyFiles@2
    condition: always() 
    inputs:
      contents: 'Build/**/CMakeFiles/**'
      targetFolder: '$(Build.ArtifactStagingDirectory)/logs'

  - task: PublishBuildArtifacts@1
    condition: always() 
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
      artifactName: 'galene-logs-$(buildPlatform)'

  - task: CopyFiles@2
    inputs:
      contents: '$(publishPath)'
      targetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: PublishPipelineArtifact@0
    condition: not(eq(variables['publishPath'],''))
    inputs:
      artifactName: 'Galene-$(buildPlatform)'
      targetPath: '$(Build.ArtifactStagingDirectory)/build'